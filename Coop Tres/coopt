#!/usr/bin/env python3

'''
Coop 8.0 1/15/22
GPIO.VERSION '0.6.3'
Raspberry Pi 3 Model B Rev 1.2

*************** I/O is for old coop door **********************

daylight is sunrise to sunset

if daylight is decreasing
	door opens and lights on at dawn

if daylight is increasing
	add light ramp * days since solstace up to maximum light

lights off at sunrise plus extra light after sunrise

door closes at dusk

'''

"""
Coop Duex
ssh 192.168.1.135

Dependencies
sudo apt update
sudo apt dist-upgrade

sudo apt install python3-pyqt5
sudo apt install python3-pip
sudo pip3 install astral
sudo apt install python3-schedule

Setting up an NGINX web server on a Raspberry Pi
sudo apt install nginx
sudo /etc/init.d/nginx start
sudo systemctl enable nginx
sudo systemctl status nginx

check configuration errors by using this command
sudo nginx -T

sudo service nginx stop
sudo apt --purge autoremove nginx     
sudo rm -rf /etc/nginx
sudo rm /usr/sbin/nginx


add john to the www-data group
sudo usermod -a -G www-data john

give ownership to all the files and folders in the /var/www/html directory
to the www-data group.

sudo chown -R -f john:www-data /var/www/html

copy index.html to var/www/html
rm /var/www/html/index.nginx-debian.html

sudo reboot

Autostart
sudo nano /etc/xdg/openbox/autostart

/home/john/bin/coop &

DS18B20 Temperature Probe
Black 0vdc
Red 3.3vdc
Yellow GPIO4
4.7k between 3.3vdc and Yellow

"""

import sys, os, pytz, schedule, signal
from astral import LocationInfo
from astral.sun import sun, daylight
import RPi.GPIO as GPIO
from datetime import datetime, timedelta
from PyQt5.QtCore import QCoreApplication, QTimer, QTime

# coordinates = ['City', 'Country', 'latitude', longitude', 'timezone', 'elevation']
# pbmo = astral.Location(info=(coordinates))
PBMO = LocationInfo("Poplar Bluff", "Midwest", "US/Central", 36.873512, -90.488008)
PBMO.solar_depression = "civil"
PBTZ = pytz.timezone('US/Central')

# strftime formats
HM = '%I:%M %p'
HMS = '%I:%M:%S %p'

# settings
LIGHT_MINUTES = 60

# normal relays
RUN = True
STOP = False
ON = True
OFF = False

# setup I/O Constants
# outputs
DOOR_UP = 4
DOOR_DOWN = 5
DOOR_LOCK = 6
LIGHTS = 7

# inputs
MAN_UP = 22
MAN_DOWN = 23
MAN_LIGHT = 24
UP_PROX = 26
DOWN_PROX = 27

# setup I/O
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(DOOR_UP, GPIO.OUT) # Motor FWD
GPIO.output(DOOR_UP, STOP)
GPIO.setup(DOOR_DOWN, GPIO.OUT) # Motor REV
GPIO.output(DOOR_DOWN, STOP)
GPIO.setup(DOOR_LOCK, GPIO.OUT) # Door Lock
GPIO.output(DOOR_LOCK, STOP)
GPIO.setup(LIGHTS, GPIO.OUT) # Lights
GPIO.output(LIGHTS, STOP)
GPIO.setup(UP_PROX, GPIO.IN,pull_up_down=GPIO.PUD_DOWN) # Door Up Switch
GPIO.setup(DOWN_PROX, GPIO.IN,pull_up_down=GPIO.PUD_DOWN) # Door Down Switch
GPIO.setup(MAN_UP, GPIO.IN,pull_up_down=GPIO.PUD_DOWN) # Manual Up Switch
GPIO.setup(MAN_DOWN, GPIO.IN,pull_up_down=GPIO.PUD_DOWN) # Manual Down Switch
GPIO.setup(MAN_LIGHT, GPIO.IN,pull_up_down=GPIO.PUD_DOWN) # Manual Light Switch


class main(QCoreApplication):
	def __init__(self, *args, **kwargs):
		super().__init__([])
		schedule.every().day.at('00:01').do(self.updateSun)
		# catch Ctrl C when ran from the terminal
		signal.signal(signal.SIGINT, self.cleanExit)

		print('Ctrl C to quit')

		self.minuteTimer = QTimer()
		self.minuteTimer.timeout.connect(self.update)
		self.minuteTimer.start(1000)
		self.minute = 0
		self.sensor = False
		devices = '/sys/bus/w1/devices/'
		if os.path.exists(devices):
			for directory in os.listdir(devices):
				if directory.startswith('28'):
					self.sensor = os.path.join(devices, directory, 'w1_slave')
					print(f'Sensor Path {self.sensor}')
		else:
			print(f'{d} is not found!')

		self.updateSun()

	# on bootup/update set up the door/light open times for today
	def updateSun(self):
		self.todaySun = sun(PBMO.observer, date=datetime.today(), tzinfo=PBTZ)

		# get todays sunlight
		daytime = daylight(PBMO.observer, date=datetime.today(), tzinfo=PBTZ)
		light = daytime[1] - daytime[0]

		lightSeconds = light.total_seconds()
		hours, remainder = divmod(lightSeconds, 3600)
		minutes, seconds = divmod(remainder, 60)
		self.daylight = f'{int(hours):02}:{int(minutes):02}:{int(seconds):02}'

		#yesterdaySun = daylight(PBMO.observer, date=datetime.today() - timedelta(days=1), tzinfo=PBTZ)
		#yesterdayLight = yesterdaySun[1] - yesterdaySun[0]
		#yesterdayLightSeconds = yesterdayLight.total_seconds()

		self.doorOpenTime = self.todaySun['sunrise']
		self.lightOnTime = self.todaySun['sunrise']

		self.doorCloseTime = self.todaySun['dusk']
		self.lightOffTime = self.todaySun['sunrise'] + timedelta(minutes=LIGHT_MINUTES)

		#self.updateStatus()

	def update(self):
		now = datetime.now().strftime('%I:%M:%S %p')
		today = datetime.now().strftime('%A, %B %d, %Y')
		if self.sensor:
			with open(self.sensor, 'r') as t:
				lines = t.readlines()
			for line in lines:
				if line.strip()[-3:] != 'YES':
					c = line.split('=')[1]
					f = ((float(c) / 1000.0) * (9.0 / 5.0)) + 32.0
		with open('/var/www/html/status.txt', 'w') as h:
			h.write('<p>Coop Tres</p>')
			h.write(f'{today}<br>')
			h.write(f'Time: {now}<br>')
			h.write(f'Temperature: {f:.1f}F<br>')
			h.write(f'Dawn: {self.todaySun["dawn"].strftime(HMS)}<br>')
			h.write(f'Sunrise: {self.todaySun["sunrise"].strftime(HMS)}<br>')
			h.write(f'Sunset: {self.todaySun["sunset"].strftime(HMS)}<br>')
			h.write(f'Dusk: {self.todaySun["dusk"].strftime(HMS)}<br>')
			h.write(f'Daylight: {self.daylight}<br>')
			# h.write(f'{}<br>')

	def cleanExit(self, signum, frame):
		GPIO.cleanup()
		print('\nClean Exit')
		sys.exit()

if __name__ == '__main__':
	app = QCoreApplication(sys.argv)
	gui = main()
	sys.exit(app.exec_())
